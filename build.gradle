import red.mohist.gradle.dev.MohistDevPlugin

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'maven'
apply plugin: MohistDevPlugin

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.uraniummc.cc/repository/maven-public/' }
    maven { url 'http://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://files.minecraftforge.net/maven' }
    maven { url 'https://libraries.minecraft.net/' }
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/public/' }
    maven { url 'https://raw.githubusercontent.com/Mohist-Community/Mohist-Maven/master/maven/' }
}

minecraft {
    version = '1.7.10'
    mcpVersion = '9.05'
    mainClass = 'red.mohist.Mohist'
    tweakClass = 'cpw.mods.fml.common.launcher.FMLTweaker'
    installerVersion = "1.4"
    srgExtra "PK: org/bukkit/craftbukkit org/bukkit/craftbukkit/v1_7_R4"
}

group = 'red.mohist'
version = '1.7.10-' + 'git rev-parse --short HEAD'.execute().text.trim()

configurations {
    compile.extendsFrom exported
    libraries
    bootstrap
}

dependencies {
    bootstrap 'cc.uraniummc:KBootstrapX:0.2.+'

    libraries 'org.ow2.asm:asm-all:5.0.3'
    libraries 'com.typesafe.akka:akka-actor_2.11:2.3.3'
    libraries 'com.typesafe:config:1.3.1'
    libraries 'org.scala-lang:scala-actors-migration_2.11:1.1.0'
    libraries 'org.scala-lang:scala-compiler:2.11.1'
    libraries 'org.scala-lang.plugins:scala-continuations-library_2.11:1.0.2'
    libraries 'org.scala-lang.plugins:scala-continuations-plugin_2.11.1:1.0.2'
    libraries 'org.scala-lang:scala-library:2.11.1'
    libraries 'org.scala-lang:scala-parser-combinators_2.11:1.0.1'
    libraries 'org.scala-lang:scala-reflect:2.11.1'
    libraries 'org.scala-lang:scala-swing_2.11:1.0.1'
    libraries 'org.scala-lang:scala-xml_2.11:1.0.2'
    libraries 'net.sf.jopt-simple:jopt-simple:5.0.1'
    libraries 'lzma:lzma:0.0.1'
    libraries 'org.yaml:snakeyaml:1.15'
    libraries 'commons-lang:commons-lang:2.6'
    libraries 'org.avaje:ebean:2.8.1'
    libraries 'jline:jline:2.13'
    libraries 'net.md-5:SpecialSource:1.7.4'
    libraries 'net.sourceforge.argo:argo:2.25'
    libraries 'com.googlecode.json-simple:json-simple:1.1'
    libraries 'org.xerial:sqlite-jdbc:3.7.2'
    libraries 'mysql:mysql-connector-java:5.1.46'//
    libraries 'javax.persistence:persistence-api:1.0.2'
    libraries 'org.apache.httpcomponents:httpclient:4.4.1'
    libraries 'pw.prok:KImagine:0.2.0@jar'
    libraries 'net.openhft:affinity:3.0.1'
    libraries 'org.fusesource.jansi:jansi:1.11'
    libraries 'java3d:vecmath:1.3.1'
    libraries 'colt:colt:1.2.0'
    libraries 'org.jetbrains.kotlin:kotlin-runtime:1.1.4-2'
}

packageUniversal {
    from { configurations.exported.collect { it.isDirectory() ? it : zipTree(it) } }
}

packageInstaller {
    classifier = 'installer'
    from "mohist_logo.png"
    rename "mohist_logo\\.png", "big_logo.png"
}

def generateClasspath() {
    def classpath = ''
    configurations.libraries.resolvedConfiguration.resolvedArtifacts.collect { it.moduleVersion.id }.each {
        def jar = "${it.group.replace('.', '/')}/${it.name}/${it.version}/${it.name}-${it.version}.jar"
        classpath += " libraries/${jar}"
    }
    classpath += " libraries/net/minecraft/server/1.7.10/server-1.7.10.jar"
    return classpath.trim()
}

tasks.packageUniversal {
    classifier = 'server'
    setManifest {}
    manifest.attributes([
            'Manifest-Version' : '1.1',
            'Implementation-Title'  : project.name,
            'Implementation-Version': 'git rev-parse --short HEAD'.execute().text.trim(),
            'TweakClass'            : 'cpw.mods.fml.common.launcher.FMLTweaker',
            'Main-Class'            : 'red.mohist.Mohist',
            'Class-Path'            : generateClasspath()
    ])
}

task jar(type: Jar, dependsOn: packageUniversal) {
    destinationDir file("${buildDir}/distributions")
    from zipTree(tasks.packageUniversal.archivePath)
}

tasks.generateProjectCauldron << {
    def file = new File('eclipse/cauldron/build.gradle')
    file.append('''
repositories {
    clear()
    maven { url 'https://repo.uraniummc.cc/repository/maven-public/' }
    maven { url 'https://files.minecraftforge.net/maven/' }
    maven { url 'https://libraries.minecraft.net/' }
    maven { url 'https://raw.githubusercontent.com/Mohist-Community/Mohist-Maven/master/maven/' }
    mavenCentral()
    mavenLocal()
}
sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
dependencies {
''')
    configurations.libraries.resolvedConfiguration.resolvedArtifacts.collect { it.moduleVersion.id }.each { module ->
        if (['net.minecraft:server:', 'org.ow2.asm:asm-all'].findAll { (module as String).startsWith it }.size() > 0) {
            return
        }
        file.append("    compile '${module}'\n")
    }
    file.append('}')
}

task resolveAllDependencies {
    doLast {
        configurations.each { it.resolve() }
    }
}

task dumpLibs(type: Copy) {
    into "libraries"
    from configurations.libraries
}
