--- ../src-base/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
+++ ../src-work/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
@@ -26,11 +26,12 @@
 import net.minecraft.world.chunk.storage.IChunkLoader;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.event.world.ChunkUnloadEvent;
 
 public class ChunkProviderServer implements IChunkProvider
 {
     private static final Logger LOGGER = LogManager.getLogger();
-    private final Set<Long> droppedChunksSet = Sets.<Long>newHashSet();
+    public final Set<Long> droppedChunksSet = Sets.<Long>newHashSet();
     public final IChunkGenerator chunkGenerator;
     public final IChunkLoader chunkLoader;
     public final Long2ObjectMap<Chunk> id2ChunkMap = new Long2ObjectOpenHashMap<Chunk>(8192);
@@ -83,6 +84,11 @@
         return chunk;
     }
 
+    // Is it copy of method above?
+    public Chunk getChunkIfLoaded(int x, int z) {
+        return id2ChunkMap.get(ChunkPos.asLong(x, z));
+    }
+
     @Nullable
     public Chunk loadChunk(int x, int z)
     {
@@ -92,6 +98,11 @@
     @Nullable
     public Chunk loadChunk(int x, int z, @Nullable Runnable runnable)
     {
+        return getChunkAt(x, z, runnable, true);
+    }
+
+    public Chunk getChunkAt(int x, int z, Runnable runnable, boolean generate)
+    {
         Chunk chunk = this.getLoadedChunk(x, z);
         if (chunk == null)
         {
@@ -106,7 +117,7 @@
                 {
                 this.id2ChunkMap.put(ChunkPos.asLong(x, z), chunk);
                 chunk.onLoad();
-                chunk.populate(this, this.chunkGenerator);
+                chunk.populateCB(this, this.chunkGenerator, false);
                 }
 
                 loadingChunks.remove(pos);
@@ -123,6 +134,8 @@
                     return null;
                 }
             }
+        } else if (chunk == null && generate) {
+            chunk = provideChunk(x, z);
         }
 
         // If we didn't load the chunk async and have a callback run it now
@@ -136,6 +149,7 @@
 
         if (chunk == null)
         {
+            world.timings.syncChunkLoadTimer.startTiming(); // Spigot
             long i = ChunkPos.asLong(x, z);
 
             try
@@ -154,7 +168,8 @@
 
             this.id2ChunkMap.put(i, chunk);
             chunk.onLoad();
-            chunk.populate(this, this.chunkGenerator);
+            chunk.populateCB(this, this.chunkGenerator, true);
+            world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
         }
 
         return chunk;
@@ -177,7 +192,7 @@
         }
         catch (Exception exception)
         {
-            LOGGER.error("Couldn't load chunk", (Throwable)exception);
+			LOGGER.error("Couldn't load chunk", (Throwable)exception);
             return null;
         }
     }
@@ -190,7 +205,7 @@
         }
         catch (Exception exception)
         {
-            LOGGER.error("Couldn't save entities", (Throwable)exception);
+			LOGGER.error("Couldn't save entities", (Throwable)exception);
         }
     }
 
@@ -203,12 +218,12 @@
         }
         catch (IOException ioexception)
         {
-            LOGGER.error("Couldn't save chunk", (Throwable)ioexception);
+ 			LOGGER.error("Couldn't save chunk", (Throwable)ioexception);
         }
         catch (MinecraftException minecraftexception)
         {
-            LOGGER.error("Couldn't save chunk; already in use by another instance of Minecraft?", (Throwable)minecraftexception);
-        }
+			LOGGER.error("Couldn't save chunk; already in use by another instance of Minecraft?", (Throwable)minecraftexception);
+		}
     }
 
     public boolean saveChunks(boolean all)
@@ -266,11 +281,9 @@
 
                     if (chunk != null && chunk.unloadQueued)
                     {
-                        chunk.onUnload();
-                        net.minecraftforge.common.ForgeChunkManager.putDormantChunk(ChunkPos.asLong(chunk.x, chunk.z), chunk);
-                        this.saveChunkData(chunk);
-                        this.saveChunkExtraData(chunk);
-                        this.id2ChunkMap.remove(olong);
+                        if (!unloadChunk(chunk, true)) {
+                            continue;
+                        }
                         ++i;
                     }
                 }
@@ -284,6 +297,39 @@
         return false;
     }
 
+    // CraftBukkit start
+    public boolean unloadChunk(Chunk chunk, boolean save) {
+        ChunkUnloadEvent event = new ChunkUnloadEvent(chunk.bukkitChunk, save);
+        this.world.getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return false;
+        }
+        save = event.isSaveChunk();
+
+        // Update neighbor counts
+        for (int x = -2; x < 3; x++) {
+            for (int z = -2; z < 3; z++) {
+                if (x == 0 && z == 0) {
+                    continue;
+                }
+
+                Chunk neighbor = this.getChunkIfLoaded(chunk.x + x, chunk.z + z);
+                if (neighbor != null) {
+                    neighbor.setNeighborUnloaded(-x, -z);
+                    chunk.setNeighborUnloaded(x, z);
+                }
+            }
+        }
+        // Moved from unloadChunks above
+        chunk.onUnload();
+        net.minecraftforge.common.ForgeChunkManager.putDormantChunk(ChunkPos.asLong(chunk.x, chunk.z), chunk);
+        this.saveChunkData(chunk);
+        this.saveChunkExtraData(chunk);
+        this.id2ChunkMap.remove(chunk.chunkKey);
+        return true;
+    }
+    // CraftBukkit end
+
     public boolean canSave()
     {
         return !this.world.disableLevelSaving;
